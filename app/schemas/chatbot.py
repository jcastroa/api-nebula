"""
Pydantic schemas for chatbot configuration endpoints.
Validates request/response data for chatbot configuration management.
"""

from typing import List, Optional
from pydantic import BaseModel, Field, field_validator, EmailStr, HttpUrl
from datetime import datetime


# ===== Business Information Models =====

class NegocioInfo(BaseModel):
    """Business information for chatbot configuration"""
    nombre: str = Field(..., min_length=1, max_length=200, description="Business name")
    horario: str = Field(..., min_length=1, max_length=500, description="Business hours")
    telefono: str = Field(..., min_length=1, max_length=20, description="Contact phone number")
    direccion: Optional[str] = Field(None, max_length=300, description="Business address")
    sitio_web: Optional[str] = Field(None, max_length=200, description="Website URL")
    email: Optional[EmailStr] = Field(None, description="Contact email")

    @field_validator('telefono')
    @classmethod
    def validate_telefono(cls, v: str) -> str:
        """Validate phone number format"""
        if not v or len(v.strip()) == 0:
            raise ValueError('El teléfono es requerido')
        return v.strip()

    @field_validator('nombre', 'horario')
    @classmethod
    def validate_not_empty(cls, v: str) -> str:
        """Ensure required fields are not empty"""
        if not v or len(v.strip()) == 0:
            raise ValueError('Este campo es requerido')
        return v.strip()


# ===== Services Models =====

class Especialidad(BaseModel):
    """Medical specialty with pricing"""
    nombre: str = Field(..., min_length=1, max_length=200, description="Specialty name")
    precio: str = Field(..., description="Base price for this specialty")

    @field_validator('nombre', 'precio')
    @classmethod
    def validate_not_empty(cls, v: str) -> str:
        """Ensure fields are not empty"""
        if not v or len(v.strip()) == 0:
            raise ValueError('Este campo es requerido')
        return v.strip()


class PrecioAdicional(BaseModel):
    """Additional pricing modifier"""
    concepto: str = Field(..., min_length=1, max_length=300, description="Concept description")
    modificador: str = Field(..., min_length=1, max_length=200, description="Price modifier description")

    @field_validator('concepto', 'modificador')
    @classmethod
    def validate_not_empty(cls, v: str) -> str:
        """Ensure fields are not empty"""
        if not v or len(v.strip()) == 0:
            raise ValueError('Este campo es requerido')
        return v.strip()


class Servicios(BaseModel):
    """Services configuration"""
    especialidades: List[Especialidad] = Field(..., min_length=1, description="List of medical specialties")
    precios_adicionales: Optional[List[PrecioAdicional]] = Field(default=[], description="Additional pricing rules")

    @field_validator('especialidades')
    @classmethod
    def validate_especialidades(cls, v: List[Especialidad]) -> List[Especialidad]:
        """Ensure at least one specialty is provided"""
        if not v or len(v) == 0:
            raise ValueError('Debe proporcionar al menos una especialidad')
        return v


# ===== Policies Models =====

class Politicas(BaseModel):
    """Business policies and protocols"""
    protocolos: Optional[List[str]] = Field(default=[], description="List of business protocols")


# ===== FAQ Models =====

class PreguntaFrecuente(BaseModel):
    """Frequently asked question and answer"""
    pregunta: str = Field(..., min_length=1, max_length=500, description="Question")
    respuesta: str = Field(..., min_length=1, max_length=2000, description="Answer")

    @field_validator('pregunta', 'respuesta')
    @classmethod
    def validate_not_empty(cls, v: str) -> str:
        """Ensure fields are not empty"""
        if not v or len(v.strip()) == 0:
            raise ValueError('Este campo es requerido')
        return v.strip()


# ===== Main Configuration Model =====

class ConfiguracionEstructurada(BaseModel):
    """Complete structured configuration for the chatbot"""
    negocio: NegocioInfo = Field(..., description="Business information")
    servicios: Servicios = Field(..., description="Services and pricing")
    politicas: Politicas = Field(..., description="Business policies")
    preguntas_frecuentes: Optional[List[PreguntaFrecuente]] = Field(
        default=[],
        description="Frequently asked questions"
    )


# ===== Request/Response Models =====

class ChatbotConfiguracionRequest(BaseModel):
    """Request body for saving chatbot configuration"""
    configuracion: ConfiguracionEstructurada = Field(..., description="Structured chatbot configuration")
    prompt_completo: str = Field(
        ...,
        min_length=100,
        max_length=20000,
        description="Complete prompt generated by frontend, ready for GPT"
    )

    @field_validator('prompt_completo')
    @classmethod
    def validate_prompt(cls, v: str) -> str:
        """Validate prompt is not empty and has minimum length"""
        if not v or len(v.strip()) < 100:
            raise ValueError('El prompt completo debe tener al menos 100 caracteres')
        return v.strip()


class ChatbotConfiguracionResponse(BaseModel):
    """Response with full chatbot configuration"""
    id: int = Field(..., description="Configuration ID")
    negocio_id: int = Field(..., description="Business/consultorio ID")
    configuracion: ConfiguracionEstructurada = Field(..., description="Structured configuration")
    prompt_completo: str = Field(..., description="Complete prompt")
    created_at: Optional[datetime] = Field(None, description="Creation timestamp")
    updated_at: Optional[datetime] = Field(None, description="Last update timestamp")

    class Config:
        from_attributes = True
        json_schema_extra = {
            "example": {
                "id": 1,
                "negocio_id": 123,
                "configuracion": {
                    "negocio": {
                        "nombre": "Centro Médico Salud y Vida",
                        "horario": "Lunes a viernes de 8:00 a 20:00",
                        "telefono": "(123) 456-7890",
                        "direccion": "Av. Principal 123",
                        "sitio_web": "www.saludyvida.com",
                        "email": "citas@saludyvida.com"
                    },
                    "servicios": {
                        "especialidades": [
                            {"nombre": "Medicina General", "precio": "120"}
                        ],
                        "precios_adicionales": []
                    },
                    "politicas": {
                        "protocolos": ["Las citas deben agendarse con 24h de anticipación"]
                    },
                    "preguntas_frecuentes": []
                },
                "prompt_completo": "Eres un asistente médico virtual...",
                "created_at": "2024-01-15T10:30:00",
                "updated_at": "2024-01-15T10:30:00"
            }
        }


class ChatbotConfiguracionSaveResponse(BaseModel):
    """Response after saving configuration"""
    success: bool = Field(True, description="Operation success status")
    message: str = Field(..., description="Success message")
    data: dict = Field(..., description="Saved configuration metadata")

    class Config:
        json_schema_extra = {
            "example": {
                "success": True,
                "message": "Configuración guardada exitosamente",
                "data": {
                    "id": 1,
                    "negocio_id": 123,
                    "updated_at": "2024-01-15T10:30:00"
                }
            }
        }
